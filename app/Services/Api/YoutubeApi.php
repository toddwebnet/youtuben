<?php

namespace App\Services\Api;

use Alaouy\Youtube\Youtube;
use Illuminate\Support\Facades\Log;

class YoutubeApi extends Youtube
{
    const MAXRESULTS = 25;

    public function __construct()
    {
        parent::__construct(env('YOUTUBE_API_KEY'));
        $this->APIs = array_merge($this->APIs, [
            'subscriptions.list' => 'https://www.googleapis.com/youtube/v3/subscriptions',
            'channel.listVideos' => 'https://www.googleapis.com/youtube/v3/search'
        ]);
    }

    public function getChannelId($channelName)
    {
        $data = $this->getChannelByName($channelName);
        return $data->id;
    }

    public function getSubscriptions($channelId, $part = ['snippet'])
    {
        $data = [];
        $page = null;
        do {
            $content = $this->getSubscriptionData($channelId, $part, $page);
            if (!property_exists($content, 'items')) {
                print_r($content);
                die();
            }
            $data = array_merge($data, $content->items);
            if (property_exists($content, 'nextPageToken')) {
                $page = $content->nextPageToken;
            } else {
                $page = null;
            }
        } while ($page != null);
        return $data;
    }

    private function getSubscriptionData($channelId, $part, $page = null)
    {
        $API_URL = $this->getApi('subscriptions.list');
        $params = [
            'channelId' => $channelId,
            'key' => $this->youtube_key,
            'part' => implode(', ', $part),
            'maxResults' => self::MAXRESULTS
        ];
        if ($page !== null) {
            $params['pageToken'] = $page;
        }

        return json_decode($this->api_get($API_URL, $params));
    }

    public function listAllChannelVideos($channelId)
    {
        $nextPage = null;
        $maxResults = 50;
        $order = 'date';
        $part = ['id', 'snippet'];
        $params = [
            'type' => 'video',
            'channelId' => $channelId,
            'part' => implode(', ', $part),
            'maxResults' => $maxResults,
        ];

        if (!empty($order)) {
            $params['order'] = $order;
        }
        $data = [];
        $lastDate = null;
        $rows = 0;
        $dontStop = true;
        do {
            $rows++;
            if ($lastDate !== null) {
                $params['publishedBefore'] = $lastDate;
            }
            // $params['publishedAfter'] = '2018-01-01';
            $results = $this->searchAdvanced($params, false);

            try {
                foreach ($results as $item) {

                    $videoId = $item->id->videoId;
                    if (!in_array($videoId, $data)) {
                        $data[] = [
                            'videoId' => $videoId,
                            'publishedAt' => $item->snippet->publishedAt,
                        ];
                    }
                    $lastDate = $item->snippet->publishedAt;
                }
            } catch (\Exception $e) {
                // do nothing
            }
            if (strtotime($lastDate) < strtotime("2018-01-01")) {
                break;
            }
        } while (!array_key_exists('publishedBefore', $params) || $lastDate != $params['publishedBefore']);

        return $data;
    }

    public function getVideoInfo($vId, $part = ['id', 'snippet', 'contentDetails', 'player', 'statistics', 'status'])
    {
        try {
            return parent::getVideoInfo($vId, $part); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            Log::error("Err in getVideoInfo for vid: {$vId}");
        }
    }

    public function getVideoInfoShort($videoId)
    {

        # Use the Curl extension to query Google and get back a page of results
        $url = "http://www.youtube.com/get_video_info?video_id={$videoId}";
        $ch = curl_init();
        $timeout = 5;
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
        $html = curl_exec($ch);
        curl_close($ch);

        $data = $this->splitOut($html);
        // foreach (['adaptive_fmts', 'fflags', 'url_encoded_fmt_stream_map'] as $key) {
        //     $data[$key] = $this->splitOut($data[$key]);
        // }
        $data['player_response'] = json_decode($data['player_response']);
        // print_r($data);return;
        // print_r($data['player_response']);return;
        $videoDetails = $data['player_response']->videoDetails;
        try {
            $smallImg = $videoDetails->thumbnail->thumbnails[0]->url;
        } catch (\Exception $e) {
            $smallImg = null;
        }
        try {
            $medImg = $videoDetails->thumbnail->thumbnails[1]->url;
        } catch (\Exception $e) {
            $medImg = null;
        }
        try {
            $bigImg = $videoDetails->thumbnail->thumbnails[2]->url;
        } catch (\Exception $e) {
            $bigImg = null;
        }
        return [
            'channelId' => $videoDetails->channelId,
            'title' => $videoDetails->title,
            'tags' => property_exists($videoDetails, 'keywords') ? $videoDetails->keywords : [],
            'length' => $videoDetails->lengthSeconds,
            'smallImg' => $smallImg,
            'medImg' => $medImg,
            'bigImg' => $bigImg,
            'views' => (property_exists($videoDetails, 'viewCount')) ? $videoDetails->viewCount : 0,
        ];
    }

    private function splitOut($string)
    {
        $data = [];
        foreach (
            explode('&', $string)
            as $v) {
            list($key, $value) = explode('=', $v);
            $data[$key] = urldecode($value);
        };
        return $data;
    }

}
